// <auto-generated />
using System;
using System.Collections.Generic;
using CringeLazer.Application.Database;
using CringeLazer.Core.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CringeLazer.Bancho.Migrations
{
    [DbContext(typeof(CringeContext))]
    [Migration("20221021113736_AddKudosu")]
    partial class AddKudosu
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "countries", new[] { "unknown", "bd", "be", "bf", "bg", "ba", "bb", "wf", "bl", "bm", "bn", "bo", "bh", "bi", "bj", "bt", "jm", "bv", "bw", "ws", "bq", "br", "bs", "je", "by", "bz", "ru", "rw", "rs", "tl", "re", "tm", "tj", "ro", "tk", "gw", "gu", "gt", "gs", "gr", "gq", "gp", "jp", "gy", "gg", "gf", "ge", "gd", "gb", "ga", "sv", "gn", "gm", "gl", "gi", "gh", "om", "tn", "jo", "hr", "ht", "hu", "hk", "hn", "hm", "ve", "pr", "ps", "pw", "pt", "sj", "py", "iq", "pa", "pf", "pg", "pe", "pk", "ph", "pn", "pl", "pm", "zm", "eh", "ee", "eg", "za", "ec", "it", "vn", "sb", "et", "so", "zw", "sa", "es", "er", "me", "md", "mg", "mf", "ma", "mc", "uz", "mm", "ml", "mo", "mn", "mh", "mk", "mu", "mt", "mw", "mv", "mq", "mp", "ms", "mr", "im", "ug", "tz", "my", "mx", "il", "fr", "io", "sh", "fi", "fj", "fk", "fm", "fo", "ni", "nl", "no", "na", "vu", "nc", "ne", "nf", "ng", "nz", "np", "nr", "nu", "ck", "xk", "ci", "ch", "co", "cn", "cm", "cl", "cc", "ca", "cg", "cf", "cd", "cz", "cy", "cx", "cr", "cw", "cv", "cu", "sz", "sy", "sx", "kg", "ke", "ss", "sr", "ki", "kh", "kn", "km", "st", "sk", "kr", "si", "kp", "kw", "sn", "sm", "sl", "sc", "kz", "ky", "sg", "se", "sd", "do", "dm", "dj", "dk", "vg", "de", "ye", "dz", "us", "uy", "yt", "um", "lb", "lc", "la", "tv", "tw", "tt", "tr", "lk", "li", "lv", "to", "lt", "lu", "lr", "ls", "th", "tf", "tg", "td", "tc", "ly", "va", "vc", "ae", "ad", "ag", "af", "ai", "vi", "is", "ir", "am", "al", "ao", "aq", "as", "ar", "au", "at", "aw", "in", "ax", "az", "ie", "id", "ua", "qa", "mz" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CringeLazer.Core.Models.SessionModel", b =>
                {
                    b.Property<long>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("session_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SessionId"));

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("SessionId");

                    b.HasIndex("RefreshToken")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("session", (string)null);
                });

            modelBuilder.Entity("CringeLazer.Core.Models.UserModel", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<Countries>("Country")
                        .HasColumnType("countries")
                        .HasColumnName("country");

                    b.Property<string>("Discord")
                        .HasColumnType("text")
                        .HasColumnName("discord");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Interests")
                        .HasColumnType("text")
                        .HasColumnName("interests");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<bool>("IsBNG")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bng");

                    b.Property<bool>("IsBot")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bot");

                    b.Property<bool>("IsGMT")
                        .HasColumnType("boolean")
                        .HasColumnName("is_gmt");

                    b.Property<bool>("IsQAT")
                        .HasColumnType("boolean")
                        .HasColumnName("is_qat");

                    b.Property<bool>("IsSupporter")
                        .HasColumnType("boolean")
                        .HasColumnName("is_supporter");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("join_date");

                    b.Property<DateTime>("LastVisit")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_visit");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Occupation")
                        .HasColumnType("text")
                        .HasColumnName("occupation");

                    b.Property<bool>("PMFriendsOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("pm_friends_only");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<List<string>>("PreviousUsernames")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("previous_usernames");

                    b.Property<int>("SupportLevel")
                        .HasColumnType("integer")
                        .HasColumnName("support_level");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Twitter")
                        .HasColumnType("text")
                        .HasColumnName("twitter");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<string>("Website")
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasKey("UserId");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("CringeLazer.Core.Models.SessionModel", b =>
                {
                    b.HasOne("CringeLazer.Core.Models.UserModel", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CringeLazer.Core.Models.UserModel", b =>
                {
                    b.OwnsOne("CringeLazer.Core.Models.KudosuModel", "Kudosu", b1 =>
                        {
                            b1.Property<long>("UserModelUserId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Available")
                                .HasColumnType("integer")
                                .HasColumnName("kudosu_available");

                            b1.Property<int>("Total")
                                .HasColumnType("integer")
                                .HasColumnName("kudosu_total");

                            b1.HasKey("UserModelUserId");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserModelUserId");
                        });

                    b.Navigation("Kudosu");
                });

            modelBuilder.Entity("CringeLazer.Core.Models.UserModel", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
